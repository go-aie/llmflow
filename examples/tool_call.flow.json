{
  "name": "tool_call",
  "type": "serial",
  "description": "Manage projects by calling tools.",
  "input": {
    "schema": {
      "input": {
        "type": "object",
        "required": [
          "messages"
        ],
        "properties": {
          "messages": {
            "type": "array",
            "description": "A list of messages comprising the conversation so far.",
            "items": {
              "type": "object",
              "required": [
                "role",
                "content"
              ],
              "properties": {
                "role": {
                  "type": "string",
                  "description": "The role of the messages author.",
                  "enum": [
                    "system",
                    "user",
                    "assistant"
                  ],
                  "default": "user"
                },
                "content": {
                  "type": "string",
                  "description": "The contents of the user message."
                }
              }
            }
          }
        }
      },
      "output": {
        "type": "object",
        "properties": {
          "content": {
            "type": "string",
            "description": "The assistant's reply."
          }
        }
      }
    },
    "tasks": [
      {
        "name": "chat",
        "type": "call",
        "input": {
          "loader": "llmflow",
          "task": "llm_azure_openai",
          "input": {
            "api_version": "2023-07-01-preview",
            "deployment_name": "YOUR_DEPLOYMENT_NAME",
            "messages": "${input.messages}",
            "resource_name": "YOUR_RESOURCE_NAME",
            "tools": [
              {
                "name": "create_project",
                "description": "Create a project with the given name and visibility.",
                "parameters": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The project name."
                    },
                    "visibility": {
                      "type": "string",
                      "description": "The project visibility",
                      "enum": [
                        "public",
                        "private"
                      ]
                    }
                  }
                }
              },
              {
                "name": "delete_project",
                "description": "Delete a project",
                "parameters": {
                  "type": "object",
                  "required": [
                    "name"
                  ],
                  "properties": {
                    "name": {
                      "type": "string",
                      "description": "The project name to delete."
                    }
                  }
                }
              }
            ]
          }
        }
      },
      {
        "name": "need_to_call_tool",
        "type": "decision",
        "input": {
          "expression": "${str(bool(chat.tool_calls))}",
          "cases": {
            "True": {
              "name": "switch",
              "type": "serial",
              "input": {
                "tasks": [
                  {
                    "name": "extract_tool",
                    "type": "code",
                    "input": {
                      "code": "def _(env):\n    call = env.chat.tool_calls[0].function\n    return dict(\n        name=call.name,\n        arguments=jsondecode(call.arguments),\n    )"
                    }
                  },
                  {
                    "name": "validate_tool",
                    "type": "code",
                    "input": {
                      "code": "# Here we use a Code task just for demonstration purposes.\n# Typically, you should use an HTTP task to access the service provided by the tool vendor.\n\ndef _(env):\n    tool = env.extract_tool\n\n    args = tool.arguments\n    arg_name = args.get('name', '') if args else ''\n    arg_visibility = args.get('visibility', '') if args else ''\n\n    if tool.name == 'create_project':\n        if not arg_name.isalnum():\n            return 'Please provide the name.'\n        if arg_visibility not in ('public', 'private'):\n            return 'Please provide the visibility (public or private).'\n    elif tool.name == 'delete_project':\n        if not arg_name.isalnum():\n            return 'Please provide the name.'\n    else:\n        return 'Sorry, operation not supported!'\n\n    return ''"
                    }
                  },
                  {
                    "name": "is_valid",
                    "type": "decision",
                    "input": {
                      "expression": "${str(validate_tool.result == '')}",
                      "cases": {
                        "True": {
                          "name": "switch",
                          "type": "serial",
                          "input": {
                            "tasks": [
                              {
                                "name": "has_confirm_message",
                                "type": "decision",
                                "input": {
                                  "expression": "${str(len(input.messages) > 1 and input.messages[-2].content.endswith('Are you sure?'))}",
                                  "cases": {
                                    "True": {
                                      "name": "switch",
                                      "type": "serial",
                                      "input": {
                                        "tasks": [
                                          {
                                            "name": "analyze_prompt",
                                            "type": "template",
                                            "input": {
                                              "args": {
                                                "query": "${input.messages[-1]}"
                                              },
                                              "template": "Based on the input, determine whether it's positive, negative or other.\n\nExample 1\nInput: Okay\nOutput: positive\n\nExample 2\nInput: Forget it\nOutput: negative\n\nExample 3\nInput: Create a project\nOutput: other\n\nExample 4\nInput: Change the name, please\nOutput: other\n\nExample 5\nInput: No problem\nOutput: positive\n\nExample 6\nInput: What did you say?\nOutput: other\n\nCurrent conversation\nInput: {{$.query}}\nOutput:"
                                            }
                                          },
                                          {
                                            "name": "analyze_llm",
                                            "type": "call",
                                            "input": {
                                              "loader": "llmflow",
                                              "task": "llm_azure_openai",
                                              "input": {
                                                "api_version": "2023-07-01-preview",
                                                "deployment_name": "YOUR_DEPLOYMENT_NAME",
                                                "messages": [
                                                  {
                                                    "role": "user",
                                                    "content": "${analyze_prompt.result}"
                                                  }
                                                ],
                                                "resource_name": "YOUR_RESOURCE_NAME"
                                              }
                                            }
                                          },
                                          {
                                            "name": "user_sentiment",
                                            "type": "decision",
                                            "input": {
                                              "expression": "${analyze_llm.content}",
                                              "cases": {
                                                "positive": {
                                                  "name": "switch",
                                                  "type": "serial",
                                                  "input": {
                                                    "tasks": [
                                                      {
                                                        "name": "call_tool",
                                                        "type": "code",
                                                        "input": {
                                                          "code": "# Here we use a Code task just for demonstration purposes.\n# Typically, you should use an HTTP task to access the service provided by the tool vendor.\n\ndef _(env):\n    tool = env.extract_tool.result\n    op_name = 'created' if tool.name == 'create_project' else 'deleted'\n    proj_name = tool.arguments.name\n    return 'The project `%s` has been %s for you!' % (proj_name, op_name)"
                                                        }
                                                      },
                                                      {
                                                        "name": "finish",
                                                        "type": "terminate",
                                                        "input": {
                                                          "output": {
                                                            "content": "${call_tool.result}"
                                                          }
                                                        }
                                                      }
                                                    ]
                                                  }
                                                },
                                                "negative": {
                                                  "name": "cancel",
                                                  "type": "terminate",
                                                  "input": {
                                                    "output": {
                                                      "content": "Operation canceled. Let me know if you need any further assistance."
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              {
                                "name": "build_confirm_message",
                                "type": "code",
                                "input": {
                                  "code": "def _(env):\n    tool = env.extract_tool\n    args = dict(\n        name=tool.name.removesuffix('_project'),\n        arguments=jsonencode(tool.arguments),\n    ) \n    \n    return '''About to {name} a project for you, with the following arguments:\n```json\n{arguments}\n```\nAre you sure?'''.format(**args)"
                                }
                              },
                              {
                                "name": "ask_user_to_confirm",
                                "type": "terminate",
                                "input": {
                                  "output": {
                                    "content": "${build_confirm_message.result}"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "False": {
                          "name": "ask_user_to_correct",
                          "type": "terminate",
                          "input": {
                            "output": {
                              "content": "${validate_tool.result}"
                            }
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "False": {
              "name": "reply",
              "type": "terminate",
              "input": {
                "output": {
                  "content": "${chat.content}"
                }
              }
            }
          }
        }
      }
    ]
  }
}
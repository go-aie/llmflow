// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package api

import (
	"context"
	"net/http"

	"github.com/RussellLuo/kun/pkg/httpcodec"
	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/kun/pkg/oas2"
	"github.com/go-chi/chi"
	kithttp "github.com/go-kit/kit/transport/http"
)

func NewHTTPRouter(svc Service, codecs httpcodec.Codecs, opts ...httpoption.Option) chi.Router {
	r := chi.NewRouter()
	options := httpoption.NewOptions(opts...)

	r.Method("GET", "/api", oas2.Handler(OASv2APIDoc, options.ResponseSchema()))

	var codec httpcodec.Codec
	var validator httpoption.Validator
	var kitOptions []kithttp.ServerOption

	codec = codecs.EncodeDecoder("DeleteFlow")
	validator = options.RequestValidator("DeleteFlow")
	r.Method(
		"DELETE", "/flows/{name}",
		kithttp.NewServer(
			MakeEndpointOfDeleteFlow(svc),
			decodeDeleteFlowRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteTool")
	validator = options.RequestValidator("DeleteTool")
	r.Method(
		"DELETE", "/tools/{group}",
		kithttp.NewServer(
			MakeEndpointOfDeleteTool(svc),
			decodeDeleteToolRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetFlow")
	validator = options.RequestValidator("GetFlow")
	r.Method(
		"GET", "/flows/{name}",
		kithttp.NewServer(
			MakeEndpointOfGetFlow(svc),
			decodeGetFlowRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetSchemas")
	validator = options.RequestValidator("GetSchemas")
	r.Method(
		"GET", "/schemas",
		kithttp.NewServer(
			MakeEndpointOfGetSchemas(svc),
			decodeGetSchemasRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetTools")
	validator = options.RequestValidator("GetTools")
	r.Method(
		"GET", "/tools",
		kithttp.NewServer(
			MakeEndpointOfGetTools(svc),
			decodeGetToolsRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("RunFlow")
	validator = options.RequestValidator("RunFlow")
	r.Method(
		"POST", "/flows/{name}:run",
		kithttp.NewServer(
			MakeEndpointOfRunFlow(svc),
			decodeRunFlowRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("TestFlow")
	validator = options.RequestValidator("TestFlow")
	r.Method(
		"POST", "/flows/{name}:test",
		kithttp.NewServer(
			MakeEndpointOfTestFlow(svc),
			decodeTestFlowRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpsertFlow")
	validator = options.RequestValidator("UpsertFlow")
	r.Method(
		"PUT", "/flows/{name}",
		kithttp.NewServer(
			MakeEndpointOfUpsertFlow(svc),
			decodeUpsertFlowRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("UpsertTool")
	validator = options.RequestValidator("UpsertTool")
	r.Method(
		"PUT", "/tools/{group}",
		kithttp.NewServer(
			MakeEndpointOfUpsertTool(svc),
			decodeUpsertToolRequest(codec, validator),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(kitOptions,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	return r
}

func decodeDeleteFlowRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteFlowRequest

		name := []string{chi.URLParam(r, "name")}
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeDeleteToolRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req DeleteToolRequest

		if err := codec.DecodeRequestBody(r, &_req); err != nil {
			return nil, err
		}

		group := []string{chi.URLParam(r, "group")}
		if err := codec.DecodeRequestParam("group", group, &_req.Group); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetFlowRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req GetFlowRequest

		name := []string{chi.URLParam(r, "name")}
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeGetSchemasRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		return nil, nil
	}
}

func decodeGetToolsRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		return nil, nil
	}
}

func decodeRunFlowRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req RunFlowRequest

		if err := codec.DecodeRequestBody(r, &_req.Input); err != nil {
			return nil, err
		}

		name := []string{chi.URLParam(r, "name")}
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeTestFlowRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req TestFlowRequest

		if err := codec.DecodeRequestBody(r, &_req.Input); err != nil {
			return nil, err
		}

		name := []string{chi.URLParam(r, "name")}
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpsertFlowRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpsertFlowRequest

		if err := codec.DecodeRequestBody(r, &_req.Definition); err != nil {
			return nil, err
		}

		name := []string{chi.URLParam(r, "name")}
		if err := codec.DecodeRequestParam("name", name, &_req.Name); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

func decodeUpsertToolRequest(codec httpcodec.Codec, validator httpoption.Validator) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var _req UpsertToolRequest

		if err := codec.DecodeRequestBody(r, &_req); err != nil {
			return nil, err
		}

		group := []string{chi.URLParam(r, "group")}
		if err := codec.DecodeRequestParam("group", group, &_req.Group); err != nil {
			return nil, err
		}

		__ := r.Header.Values("Authorization")
		if err := codec.DecodeRequestParam("__", __, nil); err != nil {
			return nil, err
		}

		if err := validator.Validate(&_req); err != nil {
			return nil, err
		}

		return &_req, nil
	}
}

// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package api

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/orchestrator"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-kit/kit/endpoint"
)

type DeleteFlowRequest struct {
	Name string `json:"-"`
}

// ValidateDeleteFlowRequest creates a validator for DeleteFlowRequest.
func ValidateDeleteFlowRequest(newSchema func(*DeleteFlowRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteFlowRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteFlowResponse struct {
	Err error `json:"-"`
}

func (r *DeleteFlowResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteFlowResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteFlow creates the endpoint for s.DeleteFlow.
func MakeEndpointOfDeleteFlow(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteFlowRequest)
		err := s.DeleteFlow(
			ctx,
			req.Name,
		)
		return &DeleteFlowResponse{
			Err: err,
		}, nil
	}
}

type DeleteToolRequest struct {
	Group string `json:"-"`
	Typ   string `json:"typ"`
}

// ValidateDeleteToolRequest creates a validator for DeleteToolRequest.
func ValidateDeleteToolRequest(newSchema func(*DeleteToolRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteToolRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteToolResponse struct {
	Err error `json:"-"`
}

func (r *DeleteToolResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteToolResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteTool creates the endpoint for s.DeleteTool.
func MakeEndpointOfDeleteTool(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteToolRequest)
		err := s.DeleteTool(
			ctx,
			req.Group,
			req.Typ,
		)
		return &DeleteToolResponse{
			Err: err,
		}, nil
	}
}

type GetFlowRequest struct {
	Name string `json:"-"`
}

// ValidateGetFlowRequest creates a validator for GetFlowRequest.
func ValidateGetFlowRequest(newSchema func(*GetFlowRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetFlowRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetFlowResponse struct {
	Definition map[string]any `json:"definition"`
	Err        error          `json:"-"`
}

func (r *GetFlowResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetFlowResponse) Failed() error { return r.Err }

// MakeEndpointOfGetFlow creates the endpoint for s.GetFlow.
func MakeEndpointOfGetFlow(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetFlowRequest)
		definition, err := s.GetFlow(
			ctx,
			req.Name,
		)
		return &GetFlowResponse{
			Definition: definition,
			Err:        err,
		}, nil
	}
}

type GetSchemasResponse struct {
	Schemas map[string]any `json:"schemas"`
	Err     error          `json:"-"`
}

func (r *GetSchemasResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetSchemasResponse) Failed() error { return r.Err }

// MakeEndpointOfGetSchemas creates the endpoint for s.GetSchemas.
func MakeEndpointOfGetSchemas(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		schemas, err := s.GetSchemas(
			ctx,
		)
		return &GetSchemasResponse{
			Schemas: schemas,
			Err:     err,
		}, nil
	}
}

type GetToolsResponse struct {
	Groups []string          `json:"groups"`
	Tools  map[string][]Tool `json:"tools"`
	Err    error             `json:"-"`
}

func (r *GetToolsResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetToolsResponse) Failed() error { return r.Err }

// MakeEndpointOfGetTools creates the endpoint for s.GetTools.
func MakeEndpointOfGetTools(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		groups, tools, err := s.GetTools(
			ctx,
		)
		return &GetToolsResponse{
			Groups: groups,
			Tools:  tools,
			Err:    err,
		}, nil
	}
}

type ResumeActorRequest struct {
	Id    string         `json:"-"`
	Input map[string]any `json:"input"`
}

// ValidateResumeActorRequest creates a validator for ResumeActorRequest.
func ValidateResumeActorRequest(newSchema func(*ResumeActorRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ResumeActorRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ResumeActorResponse struct {
	Output map[string]any `json:"output"`
	Err    error          `json:"-"`
}

func (r *ResumeActorResponse) Body() interface{} { return &r.Output }

// Failed implements endpoint.Failer.
func (r *ResumeActorResponse) Failed() error { return r.Err }

// MakeEndpointOfResumeActor creates the endpoint for s.ResumeActor.
func MakeEndpointOfResumeActor(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ResumeActorRequest)
		output, err := s.ResumeActor(
			ctx,
			req.Id,
			req.Input,
		)
		return &ResumeActorResponse{
			Output: output,
			Err:    err,
		}, nil
	}
}

type RunFlowRequest struct {
	Name  string         `json:"-"`
	Input map[string]any `json:"input"`
}

// ValidateRunFlowRequest creates a validator for RunFlowRequest.
func ValidateRunFlowRequest(newSchema func(*RunFlowRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*RunFlowRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type RunFlowResponse struct {
	Output map[string]any `json:"output"`
	Err    error          `json:"-"`
}

func (r *RunFlowResponse) Body() interface{} { return &r.Output }

// Failed implements endpoint.Failer.
func (r *RunFlowResponse) Failed() error { return r.Err }

// MakeEndpointOfRunFlow creates the endpoint for s.RunFlow.
func MakeEndpointOfRunFlow(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*RunFlowRequest)
		output, err := s.RunFlow(
			ctx,
			req.Name,
			req.Input,
		)
		return &RunFlowResponse{
			Output: output,
			Err:    err,
		}, nil
	}
}

type TestFlowRequest struct {
	Name  string         `json:"-"`
	Input map[string]any `json:"input"`
}

// ValidateTestFlowRequest creates a validator for TestFlowRequest.
func ValidateTestFlowRequest(newSchema func(*TestFlowRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*TestFlowRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type TestFlowResponse struct {
	Event orchestrator.Event `json:"event"`
	Err   error              `json:"-"`
}

func (r *TestFlowResponse) Body() interface{} { return &r.Event }

// Failed implements endpoint.Failer.
func (r *TestFlowResponse) Failed() error { return r.Err }

// MakeEndpointOfTestFlow creates the endpoint for s.TestFlow.
func MakeEndpointOfTestFlow(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*TestFlowRequest)
		event, err := s.TestFlow(
			ctx,
			req.Name,
			req.Input,
		)
		return &TestFlowResponse{
			Event: event,
			Err:   err,
		}, nil
	}
}

type UpsertFlowRequest struct {
	Name       string         `json:"-"`
	Definition map[string]any `json:"definition"`
}

// ValidateUpsertFlowRequest creates a validator for UpsertFlowRequest.
func ValidateUpsertFlowRequest(newSchema func(*UpsertFlowRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpsertFlowRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpsertFlowResponse struct {
	Err error `json:"-"`
}

func (r *UpsertFlowResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpsertFlowResponse) Failed() error { return r.Err }

// MakeEndpointOfUpsertFlow creates the endpoint for s.UpsertFlow.
func MakeEndpointOfUpsertFlow(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpsertFlowRequest)
		err := s.UpsertFlow(
			ctx,
			req.Name,
			req.Definition,
		)
		return &UpsertFlowResponse{
			Err: err,
		}, nil
	}
}

type UpsertToolRequest struct {
	Group string `json:"-"`
	Typ   string `json:"typ"`
	Tool  Tool   `json:"tool"`
}

// ValidateUpsertToolRequest creates a validator for UpsertToolRequest.
func ValidateUpsertToolRequest(newSchema func(*UpsertToolRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpsertToolRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpsertToolResponse struct {
	Err error `json:"-"`
}

func (r *UpsertToolResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpsertToolResponse) Failed() error { return r.Err }

// MakeEndpointOfUpsertTool creates the endpoint for s.UpsertTool.
func MakeEndpointOfUpsertTool(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpsertToolRequest)
		err := s.UpsertTool(
			ctx,
			req.Group,
			req.Typ,
			req.Tool,
		)
		return &UpsertToolResponse{
			Err: err,
		}, nil
	}
}

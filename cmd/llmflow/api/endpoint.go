// Code generated by kun; DO NOT EDIT.
// github.com/RussellLuo/kun

package api

import (
	"context"

	"github.com/RussellLuo/kun/pkg/httpoption"
	"github.com/RussellLuo/validating/v3"
	"github.com/go-kit/kit/endpoint"
)

type DeleteTaskRequest struct {
	Name string `json:"-"`
}

// ValidateDeleteTaskRequest creates a validator for DeleteTaskRequest.
func ValidateDeleteTaskRequest(newSchema func(*DeleteTaskRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteTaskRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteTaskResponse struct {
	Err error `json:"-"`
}

func (r *DeleteTaskResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteTaskResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteTask creates the endpoint for s.DeleteTask.
func MakeEndpointOfDeleteTask(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteTaskRequest)
		err := s.DeleteTask(
			ctx,
			req.Name,
		)
		return &DeleteTaskResponse{
			Err: err,
		}, nil
	}
}

type DeleteToolRequest struct {
	Group string `json:"-"`
	Typ   string `json:"typ"`
}

// ValidateDeleteToolRequest creates a validator for DeleteToolRequest.
func ValidateDeleteToolRequest(newSchema func(*DeleteToolRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*DeleteToolRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type DeleteToolResponse struct {
	Err error `json:"-"`
}

func (r *DeleteToolResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *DeleteToolResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteTool creates the endpoint for s.DeleteTool.
func MakeEndpointOfDeleteTool(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteToolRequest)
		err := s.DeleteTool(
			ctx,
			req.Group,
			req.Typ,
		)
		return &DeleteToolResponse{
			Err: err,
		}, nil
	}
}

type ExecuteRequest struct {
	Name  string         `json:"name"`
	Input map[string]any `json:"input"`
}

// ValidateExecuteRequest creates a validator for ExecuteRequest.
func ValidateExecuteRequest(newSchema func(*ExecuteRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*ExecuteRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type ExecuteResponse struct {
	Output map[string]any `json:"output"`
	Err    error          `json:"-"`
}

func (r *ExecuteResponse) Body() interface{} { return &r.Output }

// Failed implements endpoint.Failer.
func (r *ExecuteResponse) Failed() error { return r.Err }

// MakeEndpointOfExecute creates the endpoint for s.Execute.
func MakeEndpointOfExecute(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*ExecuteRequest)
		output, err := s.Execute(
			ctx,
			req.Name,
			req.Input,
		)
		return &ExecuteResponse{
			Output: output,
			Err:    err,
		}, nil
	}
}

type GetSchemasResponse struct {
	Schemas map[string]any `json:"schemas"`
	Err     error          `json:"-"`
}

func (r *GetSchemasResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetSchemasResponse) Failed() error { return r.Err }

// MakeEndpointOfGetSchemas creates the endpoint for s.GetSchemas.
func MakeEndpointOfGetSchemas(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		schemas, err := s.GetSchemas(
			ctx,
		)
		return &GetSchemasResponse{
			Schemas: schemas,
			Err:     err,
		}, nil
	}
}

type GetTaskRequest struct {
	Name string `json:"-"`
}

// ValidateGetTaskRequest creates a validator for GetTaskRequest.
func ValidateGetTaskRequest(newSchema func(*GetTaskRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*GetTaskRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type GetTaskResponse struct {
	Definition map[string]any `json:"definition"`
	Err        error          `json:"-"`
}

func (r *GetTaskResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetTaskResponse) Failed() error { return r.Err }

// MakeEndpointOfGetTask creates the endpoint for s.GetTask.
func MakeEndpointOfGetTask(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetTaskRequest)
		definition, err := s.GetTask(
			ctx,
			req.Name,
		)
		return &GetTaskResponse{
			Definition: definition,
			Err:        err,
		}, nil
	}
}

type GetToolsResponse struct {
	Groups []string          `json:"groups"`
	Tools  map[string][]Tool `json:"tools"`
	Err    error             `json:"-"`
}

func (r *GetToolsResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *GetToolsResponse) Failed() error { return r.Err }

// MakeEndpointOfGetTools creates the endpoint for s.GetTools.
func MakeEndpointOfGetTools(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		groups, tools, err := s.GetTools(
			ctx,
		)
		return &GetToolsResponse{
			Groups: groups,
			Tools:  tools,
			Err:    err,
		}, nil
	}
}

type UpsertTaskRequest struct {
	Name       string         `json:"-"`
	Definition map[string]any `json:"definition"`
}

// ValidateUpsertTaskRequest creates a validator for UpsertTaskRequest.
func ValidateUpsertTaskRequest(newSchema func(*UpsertTaskRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpsertTaskRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpsertTaskResponse struct {
	Err error `json:"-"`
}

func (r *UpsertTaskResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpsertTaskResponse) Failed() error { return r.Err }

// MakeEndpointOfUpsertTask creates the endpoint for s.UpsertTask.
func MakeEndpointOfUpsertTask(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpsertTaskRequest)
		err := s.UpsertTask(
			ctx,
			req.Name,
			req.Definition,
		)
		return &UpsertTaskResponse{
			Err: err,
		}, nil
	}
}

type UpsertToolRequest struct {
	Group string `json:"-"`
	Typ   string `json:"typ"`
	Tool  Tool   `json:"tool"`
}

// ValidateUpsertToolRequest creates a validator for UpsertToolRequest.
func ValidateUpsertToolRequest(newSchema func(*UpsertToolRequest) validating.Schema) httpoption.Validator {
	return httpoption.FuncValidator(func(value interface{}) error {
		req := value.(*UpsertToolRequest)
		return httpoption.Validate(newSchema(req))
	})
}

type UpsertToolResponse struct {
	Err error `json:"-"`
}

func (r *UpsertToolResponse) Body() interface{} { return r }

// Failed implements endpoint.Failer.
func (r *UpsertToolResponse) Failed() error { return r.Err }

// MakeEndpointOfUpsertTool creates the endpoint for s.UpsertTool.
func MakeEndpointOfUpsertTool(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*UpsertToolRequest)
		err := s.UpsertTool(
			ctx,
			req.Group,
			req.Typ,
			req.Tool,
		)
		return &UpsertToolResponse{
			Err: err,
		}, nil
	}
}

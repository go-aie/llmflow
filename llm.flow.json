{
  "name": "llm",
  "type": "serial",
  "description": "Get a response from an LLM",
  "input": {
    "schema": {
      "input": {
        "type": "object",
        "required": [
          "model",
          "uri",
          "api_key",
          "prompt"
        ],
        "properties": {
          "model": {
            "type": "string",
            "description": "The model name"
          },
          "uri": {
            "type": "string",
            "description": "The model endpoint"
          },
          "api_key": {
            "type": "string",
            "description": "The API key"
          },
          "prompt": {
            "type": "string",
            "description": "The prompt to generate completions for"
          },
          "temperature": {
            "type": "number",
            "description": "What sampling temperature to use, between 0 and 2"
          },
          "stream": {
            "type": "boolean",
            "description": "If set, partial message deltas will be sent. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message."
          }
        }
      },
      "output": {
        "type": "object",
        "properties": {
          "response": {
            "type": "string",
            "description": "The response message"
          }
        }
      }
    },
    "tasks": [
      {
        "name": "chat",
        "type": "http",
        "input": {
          "method": "POST",
          "uri": "${input.uri}",
          "header": {
            "Authorization": [
              "${\"Bearer \" + input.api_key}"
            ]
          },
          "body": {
            "model": "${input.model}",
            "messages": [
              {
                "role": "user",
                "content": "${input.prompt}"
              }
            ],
            "temperature": "${input.temperature}",
            "stream": "${input.stream}"
          },
          "sse_filter": "${jsonencode({\"response\": jsondecode(data).choices[0].delta})}"
        }
      },
      {
        "name": "status",
        "type": "decision",
        "input": {
          "expression": "${str(chat.status)}",
          "cases": {
            "200": {
              "name": "stream",
              "type": "decision",
              "input": {
                "expression": "${str(isiterator(chat.body))}",
                "cases": {
                  "True": {
                    "name": "chunks",
                    "type": "terminate",
                    "input": {
                      "output": {
                        "iterator": "${chat.body}"
                      }
                    }
                  }
                },
                "default": {
                  "name": "response",
                  "type": "terminate",
                  "input": {
                    "output": {
                      "response": "${chat.body.choices[0].message.content}"
                    }
                  }
                }
              }
            }
          },
          "default": {
            "name": "failure",
            "type": "raise",
            "input": {
              "error": "${chat.body.error.message}"
            }
          }
        }
      }
    ]
  }
}
